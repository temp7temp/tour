  ---- from the book All About Maude
  ---- from the Maude Manual
  ---- by the Maude team

  fmod SYNTAXCORE is
    protecting QID-LIST .
    sorts Token Bubble NeTokenList .
    op token : Qid -> Token
         [special
            (id-hook Bubble        (1 1)
             op-hook qidSymbol     (<Qids> : ~> Qid))] .

    op bubble : QidList -> Bubble
         [special 
            (id-hook Bubble        (1 -1)
             op-hook qidListSymbol (__ : QidList QidList ~> QidList)
             op-hook qidSymbol     (<Qids> : ~> Qid))] .

    op neTokenList : QidList -> NeTokenList
         [special 
            (id-hook Bubble        (1 -1)
             op-hook qidListSymbol (__ : QidList QidList ~> QidList)
             op-hook qidSymbol     (<Qids> : ~> Qid)
             id-hook Exclude       ( . ))] .

    sorts Decl DeclList PreModule .
    subsort Decl < DeclList .
endfm
    
fmod MINI-MAUDE-SYNTAX is
including SYNTAXCORE . 
    --- sort declaration
    op sort_. : Token -> Decl .

    --- operator declaration
    op op_: ->_. : Token Token -> Decl .
    op op_:_->_. : Token NeTokenList Token -> Decl .

    --- equation declaration
    op eq_=_. : Bubble Bubble -> Decl .

    --- functional module
    op fmod_is_endfm : Token DeclList -> PreModule .
    op __ : DeclList DeclList -> DeclList [assoc gather(e E)] .
  endfm
  
---///////////////////////////////////////////////////////////////////////////////---  
---//////////////////////////// Example syntax for////////////////////////////////--- 
  
fmod NAT5STX is
protecting META-LEVEL .

	sort Conf .
	
	op Z : -> Term .
	op s_ : Term -> Term .
	op sp_|_ : Term Term -> Term .
	
endfm

fmod NAT5PROCEQ is

protecting META-LEVEL .

op processEq : Term -> EquationSet .

vars T1 T2 : Term .

eq processEq( 'sp_|_[T1,T2] )  
	= (
		eq '<_#_>['sp_|_[T1,T2],'H:Hash] = '<_#_>['Z.Nat5,'H:Hash] [none] .
  		eq '<_#_>['sp_|_[T1,T2],'h.Hash] = '<_#_>['sp_|_[T1,T2] ,'hash`(_`,_`)['key[T1],'key[T2]]] [none] .		
	) .

endfm

--- reduce in META-LEVEL : getTerm( metaParse(upModule('NAT5STX, false), 'sp 's 's 's 'Z '| 's 's 's 'Z  , anyType ) )  .
--- reduce in NAT5PROC : processEq ( 'sp_|_['s_['Z1.Term],'s_['s_['s_['Z2.Term]]]] ) .   

---//////////////////////////// Example syntax for ////////////////////////////////---
---////////////////////////////////////////////////////////////////////////////////---  
 


***(
Maude> red in META-LEVEL :
             metaParse(upModule('MINI-MAUDE-SYNTAX, false),
               'fmod 'NAT3 'is
                  'sort 'Nat3 '.
                  'op 's_ ': 'Nat3 '-> 'Nat3 '.
                  'op 'sp_|_ ': 'Nat3 'Nat3 '-> 'Nat3 '.
                  'op '0 ': '-> 'Nat3 '.
                  'eq 's 'sp '0 '| '0 's '0 '= '0 '.
               'endfm,
               'PreModule) .
               
               
{'fmod_is_endfm['token[''NAT3.Qid],'__['sort_.['token[
    ''Nat3.Qid]],'__['op_:_->_.['token[''s_.Qid],'neTokenList[''Nat3.Qid],
    'token[''Nat3.Qid]],'__['op_:_->_.
    ['token[''sp_|_.Qid],
    	'neTokenList['__[''Nat3.Qid,''Nat3.Qid]],'token[''Nat3.Qid]],
    	'__['op_:`->_.['token[''0.Qid],
    'token[''Nat3.Qid]],'eq_=_.['bubble['__[''s.Qid,''sp.Qid,''0.Qid,''|.Qid,
    ''0.Qid,''s.Qid,''0.Qid]],'bubble[''0.Qid]]]]]]],'PreModule}
    
                   

red in META-LEVEL :
             metaParse(upModule('MINI-MAUDE-SYNTAX, false),
               upTerm( 'NAT3 ), 
               'PreModule) .
               
reduce in META-LEVEL : metaParse(upModule('MINI-MAUDE-SYNTAX, false), 'fmod
    'NAT3 'is 'sort 'Nat3 '. 'op 's_ ': 'Nat3 '-> 'Nat3 '. 'op '0 ': '-> 'Nat3
    '. 'eq 's 's 's '0 '= '0 '. 'endfm, 'PreModule) .
rewrites: 2 in 0ms cpu (5ms real) (~ rewrites/second)
result ResultPair: {'fmod_is_endfm['token[''NAT3.Qid],'__['sort_.['token[
    ''Nat3.Qid]],'__['op_:_->_.['token[''s_.Qid],'neTokenList[''Nat3.Qid],
    'token[''Nat3.Qid]],'__['op_:`->_.['token[''0.Qid],'token[''Nat3.Qid]],
    'eq_=_.['bubble['__[''s.Qid,''s.Qid,''s.Qid,''0.Qid]],'bubble[
    ''0.Qid]]]]]],'PreModule}
)  